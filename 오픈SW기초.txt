2024-09-12

git이 workspace에서의 변경사항을 추적한다

+: 새로운 내용 추가 (녹색계열)
-: 기존의 내용이 제거됨 (붉은색 계열)
·: 기존 내용이 변경됨 (노란색 계열)


diff 명령어: 두 가지 내용을 비교하는 것

★시험에 나옴★
@@-0,0 +1,5@@
0번째 줄부터 0번째 줄까지 없어짐
1번째 줄부터 5번째 줄까지가 생김

수정하면 @@-1,5 +1,9@@
1번째 줄부터 5번째 줄이 삭제되고
1번째 줄부터 9번째 줄이 추가되었다
-> 타일의 내용이 수정되었다.
★★

파일은 원격 저장소에 commit할 때 commit message는 필수(github desktop에선 자동으로 입력 됨)

2024-09-13
★시험에 나올 수 있다★
github desktop -History에서 제일 밑에 있는 것이 가장 오래된 것이다.
순차적으로 이력들이 밑에서부터 쌓이기 시작함
가장 위에 있는 것이 최근 기록
이러한 자료 구조를 "stack 자료구조"라고 부른다

입력은
6
5
4
3
2
1
순서이지만

출력할 때는
6->5->4->3->2->1 순서로 출력이 되며, 하나를 출력할 때마다 없어진다
input: 1 2 3 4 5 6
output: 6 5 4 3 2 1

stack 자료구조에선 input과 output이 반대이다.
ex) ctrl+z

자료구조 큐에선 input과 output이 같다
ex) 시뮬레이션, 운영체제 프로세스 스케쥴링
★★

github desktop에서 commit 할 파일이 2개 이상이면 commit message를 자동으로 남기지 않는다.

github desktop에서 우측 상단에 Push origin 숫자↑ 에서 숫자는 파일의 개수를 알려주는 것
ex) Push origin 2↑의 경우 파일 2개를 업로드 한다는 것을 의미

이미지 파일도 tracking이 가능하다

이미지 파일의 경우 기존 그림과 새로운 그림의 사이즈 차이 비율이 diff로 표현됨

이미지 파일을 수정했을 경우, 하단에 "2-up" "Swipe" "Onion skin" "Difference" 버튼이 나온다
2-up
-이미지를 좌우에 보여줘 차이를 보게 한다
Swipe
-아래쪽에 있는 커서를 움직여 Swipe된 이미지를 볼 수 있다
Onion Skin
-아래쪽에 있는 커서를 움직여 투명도를 조절해 차이를 볼 수 있다
Difference
-두 이미지의 차이를 색채대비를 통해 보여준다

이번 주차에서 가장 중요한 것은 commit, push이다

· 여러 저장소 다루기
-git에서는 주제 또는 목적에 따라 다수의 저장소를 생성하여 관리할 수 있음
-또한 하나의 원격 저장소에 대해 여러 컴퓨터 상의 로컬 저장소를 연동하여 사용할 수 있으며, 이를 통해 각 기기관의 문서 내용을 최신 상태로 유지하고 효과적으로 관리할 수 있음
-Github Desktop에서는 여러 저장소를 다루기 위한 git 명령 중 저장소 생성 기능 외에도 remove, clone, pull과 같은 다양한 저장소 관리 기능을 제공함

-git ignore
어떤 폴더나 확장자를 설정하면 그 폴더나 확장자를 추적하지 않아 업로드를 하지 않음
· 
· 
· 