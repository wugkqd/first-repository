2024-09-12

git이 workspace에서의 변경사항을 추적한다

+: 새로운 내용 추가 (녹색계열)
-: 기존의 내용이 제거됨 (붉은색 계열)
·: 기존 내용이 변경됨 (노란색 계열)


diff 명령어: 두 가지 내용을 비교하는 것

★시험에 나옴★
@@-0,0 +1,5@@
0번째 줄부터 0번째 줄까지 없어짐
1번째 줄부터 5번째 줄까지가 생김

수정하면 @@-1,5 +1,9@@
1번째 줄부터 5번째 줄이 삭제되고
1번째 줄부터 9번째 줄이 추가되었다
-> 타일의 내용이 수정되었다.
★★

파일은 원격 저장소에 commit할 때 commit message는 필수(github desktop에선 자동으로 입력 됨)

2024-09-13
★시험에 나올 수 있다★
github desktop -History에서 제일 밑에 있는 것이 가장 오래된 것이다.
순차적으로 이력들이 밑에서부터 쌓이기 시작함
가장 위에 있는 것이 최근 기록
이러한 자료 구조를 "stack 자료구조"라고 부른다

입력은
6
5
4
3
2
1
순서이지만

출력할 때는
6->5->4->3->2->1 순서로 출력이 되며, 하나를 출력할 때마다 없어진다
input: 1 2 3 4 5 6
output: 6 5 4 3 2 1

stack 자료구조에선 input과 output이 반대이다.
ex) ctrl+z

자료구조 큐에선 input과 output이 같다
ex) 시뮬레이션, 운영체제 프로세스 스케쥴링
★★

github desktop에서 commit 할 파일이 2개 이상이면 commit message를 자동으로 남기지 않는다.

github desktop에서 우측 상단에 Push origin 숫자↑ 에서 숫자는 파일의 개수를 알려주는 것
ex) Push origin 2↑의 경우 파일 2개를 업로드 한다는 것을 의미

이미지 파일도 tracking이 가능하다

이미지 파일의 경우 기존 그림과 새로운 그림의 사이즈 차이 비율이 diff로 표현됨

이미지 파일을 수정했을 경우, 하단에 "2-up" "Swipe" "Onion skin" "Difference" 버튼이 나온다
2-up
-이미지를 좌우에 보여줘 차이를 보게 한다
Swipe
-아래쪽에 있는 커서를 움직여 Swipe된 이미지를 볼 수 있다
Onion Skin
-아래쪽에 있는 커서를 움직여 투명도를 조절해 차이를 볼 수 있다
Difference
-두 이미지의 차이를 색채대비를 통해 보여준다

이번 주차에서 가장 중요한 것은 commit, push이다

· 여러 저장소 다루기
-git에서는 주제 또는 목적에 따라 다수의 저장소를 생성하여 관리할 수 있음
-또한 하나의 원격 저장소에 대해 여러 컴퓨터 상의 로컬 저장소를 연동하여 사용할 수 있으며, 이를 통해 각 기기간의 문서 내용을 최신 상태로 유지하고 효과적으로 관리할 수 있음
-Github Desktop에서는 여러 저장소를 다루기 위한 git 명령 중 저장소 생성 기능 외에도 remove, clone, pull과 같은 다양한 저장소 관리 기능을 제공함

-git ignore
어떤 폴더나 확장자를 설정하면 그 폴더나 확장자를 추적하지 않아 업로드를 하지 않음

-github desktop 프로그램 내에서 repository를 삭제한다 하더라도 local-repository만 없어지고 원격 저장소는 없어지지 않는다
원격 저장소를 없애기 위해서는 사이트에 가서 삭제할 수 있다

                               Github 원격 저장소
N개의 로컬 저장소 =>PC 1   PC 2   ... PC n
PC -> 원격 저장소 : PUSH
원격 저장소 -> PC : PULL
★★① 원격 저장소 복제
Ⅰ. Clone repository
원격 저장소를 기존에 연결된 로컬 저장소가 아닌 다른 로컬 저장소에서 사용하기 위해 원격 저장소에 담긴 내용 전체를 로컬 저장소로 가져오는 기능
	ⅰ. 나의 원격 저장소를 여러 대의 컴퓨터에 연결하여 사용하는 경우 
	   (ex. 내 원격 저장소를 집 컴퓨터와 사무실 컴퓨터, 학교 컴퓨터 등에 연동하여 사용)
	ⅱ. 다른 사람의 원격 저장소를 나의 로컬 저장소와 연동하여 사용하는 경우 
	  *이 경우에는 별도의 권한을 부여 받지 않으면 push 명령을 수행할 수 없음
	   허가 받지 않은 다른 사람의 원격 저장소를 push하려고 하면 push 안 됨 (시험에 나옴)
		fork 명령어를 써서 원격 저장소 주인에게 허락 후 수정 가능(push 명령어 대체)
	   허가 받지 않아도 clone 명령어 사용은 가능하다
Ⅱ. Pull repository
② 원격 저장소 <-동기화-> 로컬 저장소 (나중에 실습할 예정)
원격 저장소에 여러 개의 로컬 저장소가 연결이 되어 있는 상태에서 다른 로컬 저장소에서 push를 하여 원격 저장소의 내용이 바뀌어 다른 로컬 저장소의 내용과 원격 저장소의 내용에 차이가 생겨 새로 다운로드를 하여 반영을 해야 하는데 이것을 pull 명령어라고 한다

loacl repository와 index는 보이지 않는다
add (-u): work space에서 작업한 내용을 index로 올리는 것
commit: index에서 local repository로 올리는 것
add (-u) + commit = comit -a
local repository에서 remote repository로 올리는 것은 push 명령어
work space와 remote repository의 내용이 다르면 pull 명령어
rebase: 다음 강의 때 다시 설명
remote repository에서 local repository로 다운 받는 것은 fetch명령어이다
Pull repository 이미지는 암기 해야 됨(시험에 나올 가능성 매우 높음)


시스템에 git 사용자 정보 등록
git config --global user.email "Github 계정 이메일"
git config --global user.name "Github 계정 ID"

GitHub Desktop 사용자 로그인
File - Options-Accounts
위의 git 사용자 정보 시스템 등록을 먼저 수행한 후 로그인

GitHub Desktop 사용자 계정 확인
File - Options-Git
"Name", "E-mail" 항목에 본인의 GitHub ID와 E-mail 주소 입력

GitHub Desktop 연동 앱 설정
File - Options-Integrations
"Shell", "External editor" 설정 가능
"Shell" 항목은 "Git Bash"로 설정 권장

버전 관리에서 제외할 파일 지정
Repository-Repository settings-Ignored files
내부 설정파일 ".gitignore"를 편집하는 기능 제공

새 workspace & 로컬 저장소 생성
File - New Repository

기존의 로컬 저장소를 임포트
File - Add local repository
기존에 생성되었던 로컬 저장소가 아니면 동작하지 않음.

변경된 문서를 로컬 저장소에 업로드
Commit
여러 문서를 한꺼번에 commit 하기 위해서는 "summary(Commit message)"를 반드시 입력하여야 함.

Summary 내용 확인/작성
View - Go to summary

로컬 저장소에 업로드 된 변경 문서를 원격 저장소에 업로드
Push origin(또는 Repository - Push)

원격 저장소 전체 내용을 로컬 저장소로 복제
File - Clone
해당 원격 저장소와 연동된 로컬 저장소가 생성/복제됨

원격 저장소의 최신 내용을 연동된 로컬 저장소에 반영
Repository - Pull
해당 원격 저장소와 연동된 로컬 저장소가 내 컴퓨터에 존재

저장소 리스트 화인
View - Repository list

저장소 삭제
Repository - Remove
저장소 리스트에서 삭제하려는 저장소를 먼저 선택한 후 remove 명령 수행

Workspace 내 변경된 문서 리스트 확인
View - Changes

최근까지 수행한 문서 변경 이력 확인
View - History

현재 로컬 저장소 위치에서 Shell(= Git Bash, ...) 열기
Repository - Open in Git Bash
File - Options - Integrations에서 설정된 "Shell"과 "External editor"에 따라 메뉴 이름이 다르게 표시됨.

현재 로컬 저장소 위치에서 external editor (=VS, ...) 열기
File - Options - Integrations에서 설정된 "Shell"과 "External editor"에 따라 메뉴 이름이 다르게 표시됨.

현재 로컬 저장소에 대한 workspace 폴더 열기
Repository - Show in explorer

현재 로컬 저장소와 연동된 원격 저장소 열기
Repository - View in GitHub

GitHub Desktop 사용자 가이드 보기
Help - Show User Guides
GitHub Desktop 공식 문서

*Summary(Commit Message)*
· Git에서는 활용 용도에 따라 하나 이상의 저장소를 운용할 수 있으며, 여러 저장소에 대한 다양한 관리 기능을 제공한다
· GitHub에서 제공하는 원격 저장소를 다수의 로컬 저장소와 연동함으로써 여러 대의 물리적 장치에서 동일한 환경을 저장소를 구축하고 원격으로 작업을 수행할 수 있다.
· GitHub에서는 저장소의 원격 운용과 복제를 위해 Push와 Pull, Clone 명령을 제공한다.
· 원격 저장소와 연동하여 로컬 저장소를 활용하는 경우 Push와 Pull 명령을 통해 저장소 간 동기화를 수행할 수 있다.

Branch의 기본 개념과 활용
브랜치(Branch)
하나의 저장소에 대해 여러 사람들이 동시에 작업을 수행하기 위해, 각각의 사용자별로 할당되는 독립적인 작업 영역


★Branch 진도 다 나간 후에 과제 1개 나감★

합병을 하려고 하는데 같은 파일에 다른 내용이 있으면 브랜치 충돌이라 부른다

★자료구조★
그래프(Graph) G
노드(node) V    # 원(commit)
간선(edge) E     # 원끼리 이어진 선(commit간의 연결 구조)
G=(V,E)

commit 중 base라는 것은 브랜치 할 위치임
base에서 branch하면 그 base에 있는 내용은 branch에 할당이 됨

브랜치 관련 기본 용어 전부 중요함 ★★
★브랜치 구조를 표현하는 방법 pg10 시험에 나올 예정★



C언어에서의 포인터
메모리에서의 특정 위치를 가르키는 것


Branch
각각의 원: commit
가장 최신 commit일 경우 그 commit을 가리키는 ←main(HEAD) 이 표시 됨
새로 branch를 만드는 것이 "분기", 합치는 것이 "합병"이다.
branch의 경우 윈도우 탐색기로 직접 들어가는 것이 불가능, GitHub Desktop-중앙 상단부 Current branch를 원하는 branch로 변경 후 -Show in Explorer을 통해 들어가야 한다.

*2024-09-26 수업 중 실습하는 내용*                            base                                          document4.txt 생성
-○-------------------------○---------------------●-------------------------------------------------○--Main Branch
 document1.txt 수정      document1.txt 수정  │    document1.txt 수정  document2.txt 수정  document3.txt 생성 
                                                              └----●---------------------●---------------------●--Branch1
 └document1.txt , document2.txt┘     --copy->           (document1.txt , document2.txt 존재)

Branch-1과 Branch-2에서 문서 A의 같은 부분을 편집했다면, 합병 시 어떤 문제점이 존재하는가?
- 충돌 발생할 수 있다. 

Branch합병의 종류

1. Merge
 ① Fast-forward
       -Branch1이 main Branch로부터 분기된 이후 main branch에 새로운 coomit이발생하지 않은 경우, Branch1의 	commit들을 그대로 Main Branch에 합병하는 방법.
 ② 3-way merge
       -Branch1의 commit들을 참조(refer)하는 새로운 commit이 생성되고, 이 새로운 commit을 MAin Branch에 추가하	는 형태로 병합함.
       -이 경우, 3-way merge로 병합된 commit은 Branch1과 Main Branch라는 두 개의 parents를 가짐
       -Branch1의 commit들이 Main Branch에 합병되더라도 Branch1에서 수행한 commit 이력(History)은 그대로 남음. 

2. Squash
       -Main Branch에서 분기한 Branch1에서 수행한 commit들을 새로운 commit을 만들어 해당 commit에 모두 통합한 	후(squash) 이 commit을 Main Branch에 추가하는 방법.
       -Squash and Merge를 수행하게 되면 Branch1의 모든 commit 이력이 하나의 commit으로 합쳐지므로, commit 	history를 깔끔하게 정리하기 위한 방법으로도 활용됨.

3. Rebase
        -base(Branch의 분기점)을 이동시키는 방법
        -Main Branch에서 Branch1의 분기가 발생한 지점(base)를 최신 commit의 지점으로 변경함(=Rebase)
        -Rebase 이후 Main Branch에 Branch1을 "fast-forward" 병합을 수행함.


Branch A 를 Branch B에 합병하기 위해서는 Current Branch를 Branch B 로 변경 후 합병 해야한다 (=checkout 명령)
즉, HEAD가 Branch B를 가리키도록 설정한 후 합병 진행한다.





